//go:build !ignore_autogenerated

package route

import (
	"github.com/DougTea/go-common/pkg/web"
	"github.com/DougTea/rest-go-generator/test"
	"github.com/gin-gonic/gin"
)

type TestServiceController struct {
	Service test.TestService
	Routers []*web.Router
}

func NewTestServiceController(svc test.TestService) *TestServiceController {
	return &TestServiceController{
		Service: svc,
		Routers: []*web.Router{
			newGetParmRouter(svc),
			newGetParmAndResRouter(svc),
			newPostResRouter(svc),
		},
	}
}

func newGetParmRouter(svc test.TestService) *web.Router {
	return &web.Router{
		Method: web.MethodHead,
		Path:   "/test/param",
		Handler: func(c *gin.Context) {
			p := new(test.Param)
			err := c.Bind(p)
			if err != nil {
				c.Error(err)
				return
			}
			err = svc.GetParm(*p)
			if err != nil {
				c.Error(err)
			} else {
				c.JSON(201, nil)
			}
		},
	}
}

func newGetParmAndResRouter(svc test.TestService) *web.Router {
	return &web.Router{
		Method: web.MethodOptions,
		Path:   "/test/paramAndRes",
		Handler: func(c *gin.Context) {
			p := new(test.Param)
			err := c.Bind(p)
			if err != nil {
				c.Error(err)
				return
			}
			r, err := svc.GetParmAndRes(p)
			if err != nil {
				c.Error(err)
			} else {
				c.JSON(201, r)
			}
		},
	}
}

func newPostResRouter(svc test.TestService) *web.Router {
	return &web.Router{
		Method: web.MethodOptions,
		Path:   "/test/res",
		Handler: func(c *gin.Context) {
			err := svc.PostRes()
			if err != nil {
				c.Error(err)
			} else {
				c.JSON(201, nil)
			}
		},
	}
}
